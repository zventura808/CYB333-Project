Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nAutomated Password Strength Checker\r\nAuthor: Zacchary Ventura\r\nCourse: CYB 333 - Security Automation\r\nDescription:\r\n    This script evaluates the strength of a user's password and provides\r\n    feedback on how to make it stronger. It checks for length, character\r\n    variety, and common weak patterns.\r\n\"\"\"\r\n\r\nimport re\r\nimport string\r\n\r\n\r\ndef check_password_strength(password):\r\n    \"\"\"\r\n    Evaluates the strength of the given password based on length,\r\n    character diversity, and common patterns.\r\n    Returns a tuple (score, rating, suggestions)\r\n    \"\"\"\r\n    score = 0\r\n    suggestions = []\r\n\r\n    # Check password length\r\n    if len(password) >= 12:\r\n        score += 2\r\n    elif len(password) >= 8:\r\n        score += 1\r\n    else:\r\n        suggestions.append(\"Use at least 8 characters for better security.\")\r\n\r\n    # Check for lowercase letters\r\n    if re.search(r\"[a-z]\", password):\r\n        score += 1\r\n    else:\r\n        suggestions.append(\"Add lowercase letters.\")\r\n\r\n    # Check for uppercase letters\r\n    if re.search(r\"[A-Z]\", password):\r\n        score += 1\r\n    else:\r\n        suggestions.append(\"Add uppercase letters.\")\r\n\r\n    # Check for numbers\r\n    if re.search(r\"[0-9]\", password):\r\n        score += 1\r\n    else:\r\n        suggestions.append(\"Include some numbers.\")\r\n\r\n    # Check for special characters\r\n    if re.search(r\"[^A-Za-z0-9]\", password):\r\n        score += 1\r\n    else:\r\n        suggestions.append(\"Add special characters like !, @, or #.\")\r\n\r\n    # Check for common weak patterns\r\n    if contains_common_patterns(password):\r\n        score -= 2\r\n        suggestions.append(\"Avoid common passwords or simple patterns like '1234' or 'password'.\")\r\n\r\n    # Determine password rating\r\n    if score >= 6:\r\n        rating = \"STRONG\"\r\n    elif 3 <= score < 6:\r\n        rating = \"MEDIUM\"\r\n    else:\r\n        rating = \"WEAK\"\r\n\r\n    return score, rating, suggestions\r\n\r\n\r\ndef contains_common_patterns(password):\r\n    \"\"\"\r\n    Checks if the password contains weak or predictable patterns.\r\n    Returns True if any weak pattern is found.\r\n    \"\"\"\r\n    common_patterns = [\r\n        \"password\", \"1234\", \"qwerty\", \"admin\", \"letmein\", \"welcome\", \"abc123\"\r\n    ]\r\n    for pattern in common_patterns:\r\n        if pattern.lower() in password.lower():\r\n            return True\r\n    return False\r\n\r\n\r\ndef display_results(password):\r\n    \"\"\"\r\n    Displays the results of the password strength check.\r\n    \"\"\"\r\n    score, rating, suggestions = check_password_strength(password)\r\n    print(\"\\nPassword Strength:\", rating)\r\n\r\n    if suggestions:\r\n        print(\"Tips:\")\r\n        for tip in suggestions:\r\n            print(\"-\", tip)\r\n    else:\r\n        print(\"Great job! Your password looks strong.\")\r\n\r\n\r\ndef main():\r\n    \"\"\"\r\n    Main function that runs the password checker.\r\n    \"\"\"\r\n    print(\"====================================\")\r\n    print(\" Automated Password Strength Checker\")\r\n    print(\"====================================\")\r\n    user_password = input(\"Enter a password to check:Asdasd123! \")\r\n\r\n    display_results(user_password)\r\n    print(\"\\nDone! Always remember to use unique, strong passwords for every account.\")\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 612fbbaadbe4a21fc6a6a810d8a34b0e7649511a)
+++ b/README.md	(date 1761281791351)
@@ -1,116 +1,1 @@
-"""
-Automated Password Strength Checker
-Author: Zacchary Ventura
-Course: CYB 333 - Security Automation
-Description:
-    This script evaluates the strength of a user's password and provides
-    feedback on how to make it stronger. It checks for length, character
-    variety, and common weak patterns.
-"""
-
-import re
-import string
-
-
-def check_password_strength(password):
-    """
-    Evaluates the strength of the given password based on length,
-    character diversity, and common patterns.
-    Returns a tuple (score, rating, suggestions)
-    """
-    score = 0
-    suggestions = []
-
-    # Check password length
-    if len(password) >= 12:
-        score += 2
-    elif len(password) >= 8:
-        score += 1
-    else:
-        suggestions.append("Use at least 8 characters for better security.")
-
-    # Check for lowercase letters
-    if re.search(r"[a-z]", password):
-        score += 1
-    else:
-        suggestions.append("Add lowercase letters.")
-
-    # Check for uppercase letters
-    if re.search(r"[A-Z]", password):
-        score += 1
-    else:
-        suggestions.append("Add uppercase letters.")
-
-    # Check for numbers
-    if re.search(r"[0-9]", password):
-        score += 1
-    else:
-        suggestions.append("Include some numbers.")
-
-    # Check for special characters
-    if re.search(r"[^A-Za-z0-9]", password):
-        score += 1
-    else:
-        suggestions.append("Add special characters like !, @, or #.")
-
-    # Check for common weak patterns
-    if contains_common_patterns(password):
-        score -= 2
-        suggestions.append("Avoid common passwords or simple patterns like '1234' or 'password'.")
-
-    # Determine password rating
-    if score >= 6:
-        rating = "STRONG"
-    elif 3 <= score < 6:
-        rating = "MEDIUM"
-    else:
-        rating = "WEAK"
-
-    return score, rating, suggestions
-
-
-def contains_common_patterns(password):
-    """
-    Checks if the password contains weak or predictable patterns.
-    Returns True if any weak pattern is found.
-    """
-    common_patterns = [
-        "password", "1234", "qwerty", "admin", "letmein", "welcome", "abc123"
-    ]
-    for pattern in common_patterns:
-        if pattern.lower() in password.lower():
-            return True
-    return False
-
-
-def display_results(password):
-    """
-    Displays the results of the password strength check.
-    """
-    score, rating, suggestions = check_password_strength(password)
-    print("\nPassword Strength:", rating)
-
-    if suggestions:
-        print("Tips:")
-        for tip in suggestions:
-            print("-", tip)
-    else:
-        print("Great job! Your password looks strong.")
-
-
-def main():
-    """
-    Main function that runs the password checker.
-    """
-    print("====================================")
-    print(" Automated Password Strength Checker")
-    print("====================================")
-    user_password = input("Enter a password to check:Asdasd123! ")
-
-    display_results(user_password)
-    print("\nDone! Always remember to use unique, strong passwords for every account.")
-
-
-
-
-
+# CYB333-Project
\ No newline at end of file
